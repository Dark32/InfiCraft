package mdiyo.inficraft.flora.corruptor;

import java.util.Random;

import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.SidedProxy;
import cpw.mods.fml.common.Mod.Instance;

import net.minecraft.src.Block;
import net.minecraft.src.ItemStack;
import net.minecraft.src.ModLoader;
import net.minecraft.src.World;
import net.minecraftforge.client.MinecraftForgeClient;

/**
 * Flora & Soma: Corruptor
 * Paint the nether with all colors of the rainbow!
 * @author: Merdiwen Tirelle Diyo
 */

@Mod(modid = "Flora Corruptor", name = "Flora and Soma Corruptor", version = "Anachrosim")
public class FloraCorruptor
{
	/* Proxies for sides, used for graphics processing */
	@SidedProxy(clientSide = "mdiyo.inficraft.flora.corruptor.client.FloraCorruptorClientProxy", serverSide = "mdiyo.inficraft.flora.corruptor.FloraCorruptorCommonProxy")
	public static FloraCorruptorCommonProxy proxy;
	
	/* Instance of this mod, used for grabbing prototype fields */
	@Instance
	public static FloraCorruptor instance;
	public static FloraCorruptor getInstance()
	{
		return instance;
	}

	/* Initial loading, used to define blocks, items, and entities */
	public void load() 
	{
		init();
	}
	
	public FloraCorruptor()
	{
		MinecraftForgeClient.preloadTexture("/mdiyo/inficraft/flora/corruptor/stone.png");
	}

	private void init()
	{
		PHCorruptor.initProps();
		
		corruptor = new CorruptorBlock(PHCorruptor.corruptorID);
		corruptBrick = new CorruptBrick(PHCorruptor.corruptBrickID);
		
		ModLoader.registerBlock(corruptor, net.minecraft.src.flora.corruptor.CorruptorItem.class);
		ModLoader.registerBlock(corruptBrick, net.minecraft.src.flora.corruptor.CorruptBrickItem.class);
		
		corruptred = new CorruptorGen(PHCorruptor.corruptorID, 0, PHCorruptor.corruptorSpawnSize);
		corruptblue = new CorruptorGen(PHCorruptor.corruptorID, 1, PHCorruptor.corruptorSpawnSize);
		corruptgreen = new CorruptorGen(PHCorruptor.corruptorID, 2, PHCorruptor.corruptorSpawnSize);
		corruptamber = new CorruptorGen(PHCorruptor.corruptorID, 3, PHCorruptor.corruptorSpawnSize);
		corruptmagenta = new CorruptorGen(PHCorruptor.corruptorID, 4, PHCorruptor.corruptorSpawnSize);
		corruptpurple = new CorruptorGen(PHCorruptor.corruptorID, 5, PHCorruptor.corruptorSpawnSize);
		corruptyellow = new CorruptorGen(PHCorruptor.corruptorID, 6, PHCorruptor.corruptorSpawnSize);
		corruptsilver = new CorruptorGen(PHCorruptor.corruptorID, 7, PHCorruptor.corruptorSpawnSize);
		
		proxy.addEESupport();
		proxy.addNames();
		proxy.addRecipes();
	}
	
	@Override
	public void generateNether(World world, Random random, int i, int j)
	{
		int xCor, yCor, zCor;		
		
		xCor = i + random.nextInt(16) + 8;
		yCor = random.nextInt(PHCorruptor.corruptorSpawnRange) + PHCorruptor.corruptorSpawnHeight;
		zCor = j + random.nextInt(16) + 8;
		int color = random.nextInt(8);
		
		for(int iter = 0; iter < PHCorruptor.corruptorSpawnDensity; iter++)
		{
			switch (color)
			{
				case 0:	corruptred.generate(world, random, xCor, yCor, zCor);		break;
				case 1:	corruptblue.generate(world, random, xCor, yCor, zCor);		break;
				case 2:	corruptgreen.generate(world, random, xCor, yCor, zCor);		break;
				case 3:	corruptamber.generate(world, random, xCor, yCor, zCor);		break;
				case 4:	corruptmagenta.generate(world, random, xCor, yCor, zCor);	break;
				case 5:	corruptpurple.generate(world, random, xCor, yCor, zCor);	break;
				case 6:	corruptyellow.generate(world, random, xCor, yCor, zCor);	break;
				case 7:	corruptsilver.generate(world, random, xCor, yCor, zCor);	break;
			}
		}
	}

	/* Prototype fields, used elsewhere */
	
	public static Block corruptor;
	public static Block corruptBrick;
	
	CorruptorGen corruptred;
	CorruptorGen corruptblue;
	CorruptorGen corruptgreen;
	CorruptorGen corruptamber;
	CorruptorGen corruptmagenta;
	CorruptorGen corruptpurple;
	CorruptorGen corruptyellow;
	CorruptorGen corruptsilver;
}
